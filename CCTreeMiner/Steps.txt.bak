
1. If ordered, then do canomicalization;
	Optional

2. Build preorder index.
	Required

3. Generate F1 F2
	Required

4. Extension

A. Pattern Generation:
Every PatternTree (except 1P or 2P) is created by its parent patterns via connection or combination. 

B. Frequency, closed and maximal determination:
1. Given a support type, how to determine if a pattern is frequent:   
   * If a pattern is frequent, then:
	 * If Transactional support, its transaction occurrence number should be larger than or
	   equal to transaction threshold.
	 * If Root-Occurrence supprt, its root-occurrence number should be larger than or
	   equal to root-occurrence threshold.
	 * If hybrid support, both of the occurrence numbers should be larger than or equal to
	   the thresholds respectively.
   * For Frequent-1s and Frequent-2s, their root occurrences and transaction occurrence 
     are determined by scanning the input transaction database.
   * For any pattern larger than 2, it is generated by joining (connection or combination) 
     its parents to calculate its transaction-occurrence and root-occurrence.
	 
2. How to determin closed and maximal properties of a frequent-1 pattern:
   * For Frequent-1s, their transaction match and root-occurrence match will be 
     evaluated against each super pattern from Frequent-2 set:
	 * If no super 2-pattern is frequent then it is maximal, else, it is not maximal.
	 * If transaction support, if no transaction match from super 2-pattern set, then 
	   it is closed, otherwise, it is not closed.
	 * If root occurrence supprt, if no occurrence match from super 2-pattern set, then 
	   it is closed, otherwise, it is not closed. 
	 * If hybrid support, it should not have any match from super 2-pattern set to be 
	   closed, if any, it is not closed. 

3. How to determe if a frequent pattern is NOT closed or NOT maximal:   
   * For any pattern larger than 1, when it's joined(either by connection or combination) 
     with the other parent to generate a child pattern(a super one):
   	 * If this child is frequent, then two things are to be done further:
   	   * First, the parents must not be maximal.
   	   * Secondly, they should be checked, on the basis of required support type, 
   		  against their child for transaction match and occurrence match so 
   		  as to determine if they are not closed:
   	      * If transaction support and if it has any match(transaction or root 
		    occurrence), then it is not closed.
	      * If root occurrence supprt and if it has root-occurrence match,
   	        then, it is not closed.
          * If hybrid support, then any match would make it unclosed.
	 * If the child is not frequent, then nothing can be determined.

4. How to determine if a pattern IS closed
   * For a pattern, we can make sure that it is closed if no occurrence match 
     can possibly be discovered further. 
   * For a pattern which has at least one occurrence at i and after Connection operation 
	 at depth i, if its closed property is still unknown(in other word, no occurrence
	 match has been detected), then, it is closed.
	  
5. How to determine if a pattern IS maximal:
   * For a pattern, we can make sure that it is maximal if no super frequent 
     pattern can possibly be generated further.
   * For a closed pattern, 
     * If transaction support and if the number of its transaction occurrence 
	   above i (i is not included) is smaller than threshold, then it is maximal.
	 * If occurrence support and if the number of its root occurrence above i 
	   (i is not included) is smaller than threshold, then it is maximal.
     * If hybrid support and if the number of its root occurrence above i 
	   (i is not included) is smaller than threshold, then it is maximal.

	   
Transaction Support + Has Occurrence Match                          => Not Closed
                    + Has Transaction Match + No Occurrence Match   => Not Closed
					+ No Transaction Match                          => Closed

Occurrence Support  + Has Occurrence Match                          => Not Closed
                    + Has Transaction Match + No Occurrence Match   => Closed
					+ No Transaction Match                          => Closed
                    
Hybird Support      + Has Occurrence Match                          => Not Closed
                    + Has Transaction Match + No Occurrence Match   => Not Closed
					+ No Transaction Match                          => Closed
  

C. Pruning
1. How to prune patterns that cannot be further generated to create super frequent patterns
   * After connection at depth i, for any of those patterns being connected at depth i+1, 
     if its support(transaction or root occurrence or both according to support type) above 
	 depth i+1 does not satisfy threshold, then it can be removed as the instances bellow 
	 depth i will not be able to be further generated and those above are not enough to form
	 any super frequent pattern.


